package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PLUS , RPAREN , EQUAL , SEMI , RETURN , LPAREN , COMMA , PROG , PRINT
 , VOID , MINUS , MUL , DIV , MOD , LBRACK , RBRACK , READ , NEW , PLUS_PLUS , CONST ,
 MINUS_MINUS , LBRACE , RBRACE , PLUS_EQUAL , MINUS_EQUAL , MUL_EQUAL , DIV_EQUAL , MOD_EQUAL ;

terminal Integer NUMBER ;
terminal Boolean BOOL ;
terminal Character CHAR ;
terminal String IDENT ;

nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDeclList, VarDecl , ConstDecl ,
FormalParamList, FormalParamDecl, FormPars , DesignatorArray ,
StatementList, Statement, ArrayBracks , FormalParamListExtended ,
DesignatorStatement, Minus, VarDeclListExtended ,
AddopTermList, MulopFactorList , ConstDeclListExtended ,
Assignop, AddopLeft, AddopRight, Mulop, MulopLeft, MulopRight , Addop , WithNumber ,
Program, ProgName, Designator,
MethodDecl, MethodTypeName , ConstType , Type, Term, Factor, Expr , ConstVarDeclList , VarDeclList;


Program ::= (Program) PROG ProgName:p ConstVarDeclList LBRACE MethodDeclList RBRACE
            ;

ProgName ::= (ProgName) IDENT:pName
            ;

ConstVarDeclList ::= (VarDeclarations) ConstVarDeclList VarDecl
				|
				(ConstDeclarations) ConstVarDeclList ConstDecl
				|
				(NoConstVarDecl)/* epsilon */
				;
VarDecl ::= (VarDecl) Type:varType VarDeclListExtended IDENT:varName ArrayBracks SEMI
            ;

ArrayBracks ::= (IsArray) LBRACK RBRACK
                |
                (NoArray) /* epsilon */
                ;


VarDeclListExtended ::= (VarDecListExtendedYes) VarDeclListExtended IDENT:varName ArrayBracks COMMA
                        |
                        (VarDecListExtendedNo) /* epsilon */
                        ;


Type ::= (Type) IDENT:typeName
         ;

ConstDecl ::= (ConstDecl) CONST Type IDENT:constName EQUAL ConstType ConstDeclListExtended SEMI
              ;

ConstType ::= (ConstNumber) NUMBER:val
              |
              (ConstBool) BOOL:val
              |
              (ConstChar) CHAR:val
              ;

ConstDeclListExtended ::= (ConstDeclListExtendedVal) ConstDeclListExtended COMMA IDENT:constName EQUAL ConstType
                           |
                           (NoConstDeclListExtended) /* epsilon */
                           ;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl)/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName:methType
			   LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
			   ;

VarDeclList ::= (VarDeclListYes) VarDeclList VarDecl
                |
                (VarDeclLIstNo) /* epsilon */
                ;

MethodTypeName ::= (MethodType) Type:retType IDENT:methName
                    |
                    (MethodVoid) VOID IDENT:methName
                    ;

FormPars ::= (FormParams) FormalParamList
             |
             (NoFormParam) /* epsilon */
             ;

FormalParamList ::= (FormalParamDecls) FormalParamDecl FormalParamListExtended
					;

FormalParamDecl ::= (FormalParamDecl) Type IDENT ArrayBracks;

FormalParamListExtended ::= (FormalParamListExtendedYes) FormalParamListExtended COMMA FormalParamDecl
                            |
                            (FormalParamListExtendedNo) /* epsilon */
                            ;

StatementList ::= (Statements) StatementList Statement
				  |
				  (NoStmt) /* epsilon */
				  ;

Statement ::= (Assignment) DesignatorStatement:dest SEMI
              |
              (ReturnStmtExpr) RETURN Expr SEMI
              |
              (ReturnStmtNoExpr) RETURN SEMI
			  |
			  (ReadStmt) READ LPAREN Designator RPAREN SEMI
			  |
			  (PrintStmt) PRINT LPAREN Expr:t WithNumber:wNumber RPAREN SEMI
			  ;

WithNumber ::= (WithNumberYes) COMMA NUMBER
               |
               (WithNumberNo) /* epsilon */
               ;

DesignatorStatement ::= (EqualDesStatement) Designator Assignop Expr:e
                        |
                        (IncDesStatement) Designator PLUS_PLUS
                        |
                        (DecDesStatement) Designator MINUS_MINUS
                        ;

Expr ::= (AddExpr) Minus AddopTermList
		 ;

Minus ::= (YesMinus) MINUS Term:t
          |
          (NoMinus) Term:t
          ;

AddopTermList ::= (YesAddopTermList)  Addop:a Term:t AddopTermList
                  |
                  (NoAddopTermList) /* epsilon */
                   ;

Term ::= (TermFactor) Factor:t MulopFactorList
         ;

MulopFactorList ::= (YesMulopFactorList)  Mulop:m Factor:f MulopFactorList
                     |
                     (NoMulopFactorList) /* epsilon */
                     ;


Factor ::= (ConstTypeVal) ConstType
            |
		    (ExprLRPAREN) LPAREN Expr RPAREN
		    |
		    (NewType) NEW Type
		    |
		    (NewTypeExpr) NEW Type LBRACK Expr RBRACK
		    |
		    (DesignatorFactor) Designator
		    |
		    (DesignatorFactorExtended) Designator LPAREN RPAREN
		    ;

Designator ::= (DesignatorIdent) IDENT:name
               |
               (DesignatorIdentExtended) Designator LBRACK Expr RBRACK
               ;

DesignatorArray ::= (DesignatorIdentArray) IDENT:name
;

Assignop ::= (AssignopEqual) EQUAL
             |
             (AssignopAddopRight) AddopRight
             |
             (AssignopMulopRight) MulopRight
             ;

Addop ::= (AddopBasicLeft) AddopLeft
          |
          (AddopBasicRight) AddopRight
          ;

AddopLeft ::= (AddopLeftMinus) MINUS
              |
              (AddopLeftPlus) PLUS
              ;

AddopRight ::= (AddopRightPlusEqual) PLUS_EQUAL
               |
               (AddopRightMinusEqual) MINUS_EQUAL
               ;

Mulop ::= (MulopBasicLeft) MulopLeft
          |
          (MulopBasicRight) MulopRight
          ;

MulopLeft ::= (MulopLeftMul) MUL
              |
              (MulopLeftDiv) DIV
              |
              (MulopLeftMod) MOD
              ;

MulopRight ::= (MulopRightMulEqual) MUL_EQUAL
               |
               (MulopRightDivEqual) DIV_EQUAL
               |
               (MulopRightModEqual) MOD_EQUAL
               ;